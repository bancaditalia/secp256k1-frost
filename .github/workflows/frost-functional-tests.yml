name: "FROST: functional tests (with and without coverage analysis)"

# In secp256k1 some assertions are not exactly equal when coverage is enabled
# and when it is not. Hence, it is better to run the two cases separately.

on:
  push:
    branches:
      - frost
  pull_request:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  functional-tests:
    runs-on: ubuntu-24.04
    # Use fedora:41 to compile using gcc-14.2
    container:
      image: fedora:41
    steps:
      - name: Install build dependencies
        run: |
          dnf install -y \
              autoconf \
              automake \
              diffutils \
              gcc \
              gcovr \
              libtool \
              pkg-config
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Run autogen
        run: ./autogen.sh
      - name: Functional tests with code coverage, no -Werror. Generate a summary of code coverage
        # When code coverage is enabled, the upstream secp256k1 generates a
        # warning -> we cannot use -Werror.
        continue-on-error: true
        id: tests_with_coverage
        run: |
          ./configure \
              SECP_CFLAGS="" \
              --enable-tests \
              --disable-exhaustive-tests \
              --disable-benchmark \
              --enable-coverage \
              --enable-examples \
              --enable-experimental \
              --enable-module-frost
          make -j
          make check
          # We have to add gcov-ignore-parse-errors=suspicious_hits.warn,
          # because we found no way of generating profiles without any
          # gcovr.formats.gcov.parser.common.SuspiciousHits error:
          # - adding "-fprofile-update=atomic" to SECP_CFLAGS like suggested in
          #   https://gcc.gnu.org/bugzilla/show_bug.cgi?id=68080#c4 and
          #   documented in
          #   https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html#index-fprofile-update
          #   did not help us
          #
          # Hence we accept to downgrade the errors to warnings, but we also
          # check that the set of generated warnings is exactly equal to the one
          # we are willing to allow.
          echo "Run gcovr and capture the warnings"
          # Run the gcovr command. Capture stderr in ACTUAL_WARNINGS for further
          # checks. Please note that stderr is not printed in the CI console.
          # This is tolerable because we print it immediately afterwards.
          #
          # Also note that we have to unset GITHUB_ACTIONS because otherwise
          # gcovr modifies its output compared to a normal console run. Warnings
          # would be logged twice, prepending ::warning:: the second time.
          # For example:
          #     (WARNING) Ignoring suspicious hits in line 'xxx'.
          #     ::warning::(WARNING) Ignoring suspicious hits in line 'xxx'.
          # source for gcovr's diabolic behaviour:
          #     https://github.com/gcovr/gcovr/blob/0a426ca4baae56607f7cff2188569b3dbfc9af13/src/gcovr/logging.py#L79-L83
          { ACTUAL_WARNINGS="$( { (unset GITHUB_ACTIONS; gcovr --exclude 'src/bench*' --print-summary --gcov-ignore-parse-errors=suspicious_hits.warn 2> >(tee /dev/fd/2 ); ) } 2>&1 1>&3 3>&-)"; } 3>&1;
          read -r -d '' EXPECTED_WARNINGS <<-EOF || true
          (INFO) Reading coverage data...
          (WARNING) Ignoring suspicious hits in line '                for (p = 0; p < 16; ++p) { /* p loops over the bit positions in mul2[j]. */'.
          (WARNING) Ignoring suspicious hits in line '                for (p = 0; p < 16; ++p) { /* p loops over the bit positions in mul2[j]. */'.
          (WARNING) Ignoring suspicious hits in line '                    int bitpos = j * 16 - i + p; /* bitpos is the correspond bit position in m. */'.
          (WARNING) Ignoring suspicious hits in line '                    if (bitpos >= 0 && bitpos < 256) {'.
          (WARNING) Ignoring suspicious hits in line '                    if (bitpos >= 0 && bitpos < 256) {'.
          (WARNING) Ignoring suspicious hits in line '                    if (bitpos >= 0 && bitpos < 256) {'.
          (WARNING) Ignoring suspicious hits in line '                        sub |= ((m[bitpos >> 4] >> (bitpos & 15)) & 1) << p;'.
          (INFO) Writing coverage report...
          EOF
          if [[ "${ACTUAL_WARNINGS}" != "${EXPECTED_WARNINGS}" ]]; then
              printf "::error::The warnings generated by gcovr were not exactly equal to the ones we expected\n"
              printf "EXPECTED WARNINGS:\n"
              printf "%s\n" "${EXPECTED_WARNINGS}"
              printf "DIFF EXPECTED -> ACTUAL:\n"
              diff --unified <(printf "%s" "${EXPECTED_WARNINGS}") <(printf "%s" "${ACTUAL_WARNINGS}")
              printf "::error::Failing.\n"
              exit 1
          fi
          echo "OK: gcovr generated the exact set of warnings we were willing to tolerate"
      - name: Clean the build
        run: |
          make clean
          # make clean does not remove the compiled binaries, and we are going
          # to regenerate "tests"
          rm -f tests
      - name: Functional tests with -Werror, no code coverage
        continue-on-error: true
        id: tests_no_coverage
        run: |
          ./configure \
              SECP_CFLAGS="-Werror" \
              --enable-tests \
              --disable-exhaustive-tests \
              --disable-benchmark \
              --disable-coverage \
              --enable-examples \
              --enable-experimental \
              --enable-module-frost
          make -j
          ./tests
      - name: Summarize outcomes. Fail if any step failed.
        run: |
          # summary
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          NC='\033[0m' # No Color

          echo -n "Functional tests with code coverage, no -Werror: "
          if [[ ${{ steps.tests_with_coverage.outcome }} == "success" ]]; then
            printf "${GREEN}SUCCESS${NC}\n"
          else
            printf "${RED}FAIL${NC} (${{ steps.tests_with_coverage.outcome }}), please check\n"
          fi

          echo -n "Functional tests with -Werror, no code coverage: "
          if [[ ${{ steps.tests_no_coverage.outcome }} == "success" ]]; then
            printf "${GREEN}SUCCESS${NC}\n"
          else
            printf "${RED}FAIL${NC} (${{ steps.tests_no_coverage.outcome }}), please check\n"
          fi

          if [[ ${{ steps.tests_with_coverage.outcome }} != "success" ]] || [[ ${{ steps.tests_no_coverage.outcome }} != "success" ]]; then
            exit 1
          fi
