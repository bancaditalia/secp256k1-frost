#!/usr/bin/env python3
# Copyright (c) 2023 Bank of Italy
# Distributed under the MIT software license, see the accompanying
# file COPYING or https://www.opensource.org/licenses/mit-license.php.
#
# These are not official test vectors, but has been generated and tested
# against the official implementation of hash-to-curve developed in go:
# https://github.com/armfazh/h2c-go-ref/
# https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve

"""
Generate a C file with test vectors for the sqrt_ration function
used in hash-to-curve (RFC 9380).

Usage:
> python tools/test_vectors_h2c_sqrt_ratio_generate.py > src/modules/frost/vectors/ietf_h2c_sqrt_ratio_test_vectors.h
"""
import hashlib

# Number of test vectors to generate
N = 10

# secp256k1 field modulus
P = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
# IETF_RFC9380_SECP256K1_Z
Z = -11


def is_quad_residue(x):
    return pow(x, (P - 1) // 2, P) == 1


def sqrt_ratio(u, v):
    if v == 0:
        return 0, False
    v_inv = pow(v, P - 2, P)
    y = (u * v_inv) % P
    is_qr = is_quad_residue(y)
    if not is_qr:
        y = (y * Z) % P
    r = pow(y, (P + 1) // 4, P)
    return r, is_qr


def to_c_array(x):
    return "{" + ", ".join(f"0x{b:02x}" for b in x.to_bytes(32, "big")) + "}"


# Deterministic random-looking values
def hash_to_int(seed: str) -> int:
    h = hashlib.sha256(seed.encode()).digest()
    return int.from_bytes(h, 'big') % P


# Generate and print C test vectors
def generate_sqrt_ratio_vectors(n: int = 5):
    for i in range(n):
        u = hash_to_int(f"u-{i}")
        v = hash_to_int(f"v-{i}")
        r, is_qr = sqrt_ratio(u, v)
        print("  {")
        print(f"    {to_c_array(u)},")
        print(f"    {to_c_array(v)},")
        print(f"    {to_c_array(r)},")
        print(f"    {1 if is_qr else 0},")
        print("  },")


if __name__ == "__main__":
    print("/* Note: this file was autogenerated using test_vectors_h2c_sqrt_ratio_generate.py. Do not edit. */")
    print("")
    print("#ifndef VECTORS_IETF_H2C_SQRT_RATIO_TEST_VECTORS_H")
    print("#define VECTORS_IETF_H2C_SQRT_RATIO_TEST_VECTORS_H")
    print("")
    print(f"#define IETF_H2C_SQRT_RATIO_NUM_TEST_VECTORS {N}")

    print("""
typedef struct {
  const unsigned char u[32];
  const unsigned char v[32];
  const unsigned char y[32];
  int is_qr;
} sqrt_ratio_test_vector;
""")

    print(f"static const sqrt_ratio_test_vector sqrt_ratio_vectors[IETF_H2C_SQRT_RATIO_NUM_TEST_VECTORS] = {{")
    # Generate test vectors
    generate_sqrt_ratio_vectors(N)
    print(f"}};")
    print("")
    print("#endif /* VECTORS_IETF_H2C_SQRT_RATIO_TEST_VECTORS_H */")
