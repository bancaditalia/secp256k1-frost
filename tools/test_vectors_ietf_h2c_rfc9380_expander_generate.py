#!/usr/bin/env python3
# Copyright (c) 2023 Bank of Italy
# Distributed under the MIT software license, see the accompanying
# file COPYING or https://www.opensource.org/licenses/mit-license.php.

"""
Generate a C file with test vectors for the expander function
 used in hash-to-curve (RFC 9380).
 The expander is expand_message_xmd for SHA256.

 The RFC9380 provides 2 sets of test vectors:
 - expand_message_xmd(SHA-256),
    saved in  ietf_h2c_rfc9380_expand_message_xmd_SHA256_38.json
    (see: https://datatracker.ietf.org/doc/html/rfc9380#name-expand_message_xmdsha-256)
 - expand_message_xmd(SHA-256) (Long DST),
    saved in ietf_h2c_rfc9380_expand_message_xmd_SHA256_256.json
    (see: https://datatracker.ietf.org/doc/html/rfc9380#name-expand_message_xmdsha-256-l)

Usage:
> python tools/test_vectors_ietf_h2c_rfc9380_expander_generate.py \
    src/modules/frost/vectors/ietf_h2c_rfc9380_expand_message_xmd_SHA256_38.json \
    > src/modules/frost/vectors/ietf_h2c_rfc9380_expander_test_vectors.h

(alternatively:)
> python tools/test_vectors_ietf_h2c_rfc9380_expander_generate.py \
    src/modules/frost/vectors/ietf_h2c_rfc9380_expand_message_xmd_SHA256_256.json \
    > src/modules/frost/vectors/ietf_h2c_rfc9380_expander_test_vectors.h
"""

import json
import sys

filename_input = sys.argv[1]

with open(filename_input) as f:
    doc = json.load(f)


def to_c_array(x):
    if x == "": return ""
    s = ',0x'.join(a+b for a,b in zip(x[::2], x[1::2]))
    return "0x" + s


num_tests = len(doc['tests'])

print("/* Note: this file was autogenerated using test_vectors_ietf_h2c_rfc9380_expander_generate.py. Do not edit. */")
print(f"/*   Hash: {doc['hash']} */")
print(f"/*   Name: {doc['name']} */")
print("")

print(f"#define IETF_RFC9380_EXP_DST_LEN {len(doc['DST'])}")
string_as_char_array = ','.join(f"'{c}'" for c in doc['DST'])
print(f"static const unsigned char ietf_rfc9380_exp_dst[IETF_RFC9380_EXP_DST_LEN] = {{ {string_as_char_array} }};")

print(f"#define IETF_RFC9380_EXP_K {doc['k']}")
print(f"#define IETF_RFC9380_EXP_TEST_VECTORS {int(num_tests)}")

struct_definition = """
typedef struct {
    size_t len_in_bytes;
    size_t msg_offset; 
    size_t msg_len; 
    size_t msg_prime_offset; 
    size_t msg_prime_len; 
    size_t uniform_bytes_offset;
} ietf_rfc9380_expander_test_vector;
"""
print(struct_definition)

dst_prime = ""
offset_msg_running = 0
offset_msg_prime_running = 0
offset_uniform_bytes_running = 0
msgs = ""
msg_primes = ""
uniform_bytes = ""
out = ""
dst_prime_len = 0

for i in range(num_tests):
    test = doc['tests'][i]
    if dst_prime == "":
        dst_prime = to_c_array(test['DST_prime'])
        dst_prime_len = int(len(test['DST_prime']) / 2)
    len_in_bytes = int(test['len_in_bytes'], 16)
    msg_len = len(test['msg'])
    msg_offset = offset_msg_running
    msg_prime_len = int(len(test['msg_prime']) / 2)
    msg_prime_offset = offset_msg_prime_running
    uniform_bytes_len = int(len(test['uniform_bytes']) / 2)
    uniform_bytes_offset = offset_uniform_bytes_running

    if msg_len > 0:
        msgs += f"{ to_c_array(test['msg'].encode('utf-8').hex())}, \n"
    if msg_prime_len > 0:
        msg_primes += f"{ to_c_array(test['msg_prime'])}, \n"
    if uniform_bytes_len > 0:
        uniform_bytes += f"{ to_c_array(test['uniform_bytes'])}, \n"

    out += f"  {{ {len_in_bytes}, {msg_offset}, {msg_len}, {msg_prime_offset}, {msg_prime_len}, {uniform_bytes_offset} }},\n"
    offset_msg_running += msg_len
    offset_msg_prime_running += msg_prime_len
    offset_uniform_bytes_running += uniform_bytes_len

print(f"#define IETF_RFC9380_EXP_DST_PRIME_LEN {dst_prime_len}")
print(f"static const unsigned char ietf_rfc9380_exp_dst_prime[IETF_RFC9380_EXP_DST_PRIME_LEN] = {{{dst_prime}}};")
print("static const unsigned char ietf_rfc9380_exp_msgs[]    = { " + msgs + "};\n")
print("static const unsigned char ietf_rfc9380_exp_msg_primes[]    = { " + msg_primes + "};\n")
print("static const unsigned char ietf_rfc9380_exp_uniform_bytes[]    = { " + uniform_bytes + "};\n")
print("static const ietf_rfc9380_expander_test_vector ietf_rfc9380_expander_test_vectors[IETF_RFC9380_EXP_TEST_VECTORS]"
      " = {")
print(out)
print("};")


